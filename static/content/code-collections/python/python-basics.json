{
  "id": "python-basics",
  "name": "Python Basics",
  "description": "Learn Python fundamentals through space operations and astronauts",
  "icon": "ðŸš€",
  "difficulty": "beginner",
  "language": "python",
  "snippets": [
    {
      "code": "# Basic variables and string formatting\nastronauts = [\"Neil Armstrong\", \"Buzz Aldrin\", \"Sally Ride\"]\nmission_name = \"Apollo 11\"\nlaunch_date = \"1969-07-16\"\naltitude_km = 384400\n\nprint(f\"Mission: {mission_name}\")\nprint(f\"Launch Date: {launch_date}\")\nprint(f\"Distance to Moon: {altitude_km:,} km\")\nprint(f\"Crew size: {len(astronauts)}\")\nprint(f\"Commander: {astronauts[0]}\")",
      "title": "Variables and String Formatting",
      "description": "Basic variable types and f-string formatting",
      "tags": ["variables", "f-strings", "lists"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "def calculate_escape_velocity(mass, radius):\n    \"\"\"Calculate escape velocity for celestial body\"\"\"\n    G = 6.674e-11  # gravitational constant\n    escape_vel = (2 * G * mass / radius) ** 0.5\n    return escape_vel / 1000  # convert to km/s\n\n# Earth parameters\nearth_mass = 5.972e24  # kg\nearth_radius = 6.371e6  # meters\n\nescape_velocity = calculate_escape_velocity(earth_mass, earth_radius)\nprint(f\"Earth's escape velocity: {escape_velocity:.2f} km/s\")",
      "title": "Functions and Scientific Calculations",
      "description": "Functions with scientific constants and calculations",
      "tags": ["functions", "math", "constants"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "# Lists and basic operations\nspace_stations = [\"ISS\", \"Mir\", \"Skylab\", \"Tiangong\"]\ncrew_sizes = [7, 3, 3, 3]\noperational_years = [1998, 1986, 1973, 2021]\n\nprint(\"Active Space Stations:\")\nfor i in range(len(space_stations)):\n    station = space_stations[i]\n    crew = crew_sizes[i]\n    year = operational_years[i]\n    print(f\"{station}: Max crew {crew}, Since {year}\")\n\nprint(f\"\\nTotal stations tracked: {len(space_stations)}\")",
      "title": "Lists and For Loops",
      "description": "Working with lists and traditional for loops",
      "tags": ["lists", "for-loops", "indexing"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "# More Pythonic iteration\nmissions = [\"Apollo\", \"Gemini\", \"Mercury\", \"Artemis\", \"SpaceX\"]\nlaunch_counts = [17, 12, 6, 1, 50]\n\nprint(\"Mission Programs:\")\n# Enumerate for index and value\nfor index, mission in enumerate(missions, 1):\n    print(f\"{index}. {mission}\")\n\nprint(\"\\nMission Statistics:\")\n# Zip for parallel iteration\nfor mission, launches in zip(missions, launch_counts):\n    print(f\"{mission}: {launches} launches\")",
      "title": "Enumerate and Zip",
      "description": "Advanced iteration with enumerate and zip",
      "tags": ["enumerate", "zip", "iteration"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "# Dictionaries for structured data\nastronaut = {\n    \"name\": \"Chris Hadfield\",\n    \"nationality\": \"Canadian\",\n    \"missions\": [\"STS-74\", \"STS-100\", \"Expedition 34/35\"],\n    \"total_days_in_space\": 166,\n    \"spacewalks\": 2\n}\n\nprint(f\"Astronaut: {astronaut['name']}\")\nprint(f\"Nationality: {astronaut['nationality']}\")\nprint(f\"Space experience: {astronaut['total_days_in_space']} days\")\nprint(f\"Missions: {', '.join(astronaut['missions'])}\")",
      "title": "Dictionaries and Data Access",
      "description": "Using dictionaries for structured astronaut data",
      "tags": ["dictionaries", "data-structures"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "def mission_status(fuel_percent, oxygen_level, crew_health):\n    \"\"\"Determine mission readiness\"\"\"\n    if fuel_percent >= 90 and oxygen_level >= 95:\n        if crew_health == \"excellent\":\n            return \"GO for launch\"\n        elif crew_health == \"good\":\n            return \"GO with monitoring\"\n        else:\n            return \"HOLD - crew medical review\"\n    elif fuel_percent >= 75:\n        return \"HOLD - fuel top-off required\"\n    else:\n        return \"NO GO - insufficient fuel\"\n\n# Test mission readiness\nstatus = mission_status(92, 98, \"excellent\")\nprint(f\"Mission Status: {status}\")",
      "title": "Conditional Logic and Functions",
      "description": "Complex conditionals for mission control decisions",
      "tags": ["conditionals", "functions", "logic"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "class Spacecraft:\n    def __init__(self, name, crew_capacity, fuel_capacity):\n        self.name = name\n        self.crew_capacity = crew_capacity\n        self.fuel_capacity = fuel_capacity\n        self.current_fuel = fuel_capacity\n        self.crew_count = 0\n    \n    def add_crew(self, astronauts):\n        if self.crew_count + len(astronauts) <= self.crew_capacity:\n            self.crew_count += len(astronauts)\n            return f\"Added {len(astronauts)} crew members\"\n        return \"Insufficient crew capacity\"\n    \n    def fuel_percentage(self):\n        return (self.current_fuel / self.fuel_capacity) * 100",
      "title": "Classes and Object-Oriented Design",
      "description": "Creating a Spacecraft class with methods",
      "tags": ["classes", "objects", "methods"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "# List comprehensions for space data\norbit_altitudes = [408, 410, 415, 420, 425, 430, 435]  # km\n\n# Filter high orbits (> 420km)\nhigh_orbits = [alt for alt in orbit_altitudes if alt > 420]\n\n# Convert to miles (1 km = 0.621371 miles)\norbits_miles = [alt * 0.621371 for alt in orbit_altitudes]\n\n# Complex comprehension with conditions\norbit_status = [\n    f\"{alt}km (HIGH)\" if alt > 420 else f\"{alt}km (NORMAL)\"\n    for alt in orbit_altitudes\n]\n\nprint(f\"High orbits: {high_orbits}\")\nprint(f\"First 3 in miles: {orbits_miles[:3]}\")",
      "title": "List Comprehensions",
      "description": "Creating and filtering lists with comprehensions",
      "tags": ["list-comprehension", "filtering", "transformation"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "# Working with files and exception handling\ntry:\n    # Simulate reading mission data\n    mission_log = [\n        \"T-00:10:00 - Final systems check\",\n        \"T-00:05:00 - Crew secured\",\n        \"T-00:00:00 - LAUNCH!\",\n        \"T+00:02:30 - Solid boosters separated\",\n        \"T+00:08:42 - Main engine cutoff\"\n    ]\n    \n    print(\"Mission Timeline:\")\n    for entry in mission_log:\n        print(f\"  {entry}\")\n        \nexcept FileNotFoundError:\n    print(\"Mission log file not found\")\nexcept Exception as e:\n    print(f\"Error reading mission data: {e}\")",
      "title": "Exception Handling",
      "description": "Using try-except for error handling",
      "tags": ["exceptions", "error-handling", "try-except"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "import math\n\ndef orbital_period(altitude_km, central_body_mass=5.972e24):\n    \"\"\"Calculate orbital period using Kepler's third law\"\"\"\n    G = 6.674e-11  # gravitational constant\n    radius = (altitude_km * 1000) + 6.371e6  # Earth radius\n    \n    period_seconds = 2 * math.pi * math.sqrt(radius**3 / (G * central_body_mass))\n    return period_seconds / 60  # convert to minutes\n\n# Calculate ISS orbital period\niss_altitude = 408  # km\nperiod = orbital_period(iss_altitude)\nprint(f\"ISS orbital period: {period:.1f} minutes\")\nprint(f\"Orbits per day: {(24 * 60) / period:.1f}\")",
      "title": "Modules and Advanced Math",
      "description": "Using the math module for orbital calculations",
      "tags": ["modules", "math", "import"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "# Dictionary comprehensions and set operations\nastronaut_countries = {\n    \"Neil Armstrong\": \"USA\", \"Yuri Gagarin\": \"USSR\",\n    \"Yang Liwei\": \"China\", \"Helen Sharman\": \"UK\",\n    \"Chris Hadfield\": \"Canada\", \"Thomas Pesquet\": \"France\"\n}\n\n# Country statistics using comprehension\ncountry_counts = {country: list(astronaut_countries.values()).count(country)\n                 for country in set(astronaut_countries.values())}\n\n# Set operations\nspace_agencies = {\"NASA\", \"ESA\", \"Roscosmos\", \"CNSA\", \"ISRO\"}\nactive_agencies = {\"NASA\", \"ESA\", \"CNSA\", \"SpaceX\"}\n\nprint(f\"Countries with astronauts: {country_counts}\")\nprint(f\"Common agencies: {space_agencies & active_agencies}\")",
      "title": "Dictionary Comprehensions and Sets",
      "description": "Advanced data structures and set operations",
      "tags": ["dict-comprehension", "sets", "data-structures"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "def mission_generator(start_year, end_year):\n    \"\"\"Generate mission years with yield\"\"\"\n    mission_types = [\"Exploration\", \"Research\", \"Maintenance\", \"Supply\"]\n    year = start_year\n    mission_count = 1\n    \n    while year <= end_year:\n        mission_type = mission_types[mission_count % len(mission_types)]\n        yield f\"Mission {mission_count} ({year}): {mission_type}\"\n        year += 1\n        mission_count += 1\n\n# Use the generator\nprint(\"Planned Missions 2024-2027:\")\nfor mission in mission_generator(2024, 2027):\n    print(f\"  {mission}\")",
      "title": "Generators and Yield",
      "description": "Creating generators for memory-efficient iteration",
      "tags": ["generators", "yield", "iterators"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "# Lambda functions and functional programming\nspacecraft_data = [\n    {\"name\": \"Dragon\", \"crew\": 7, \"cargo_kg\": 6000},\n    {\"name\": \"Soyuz\", \"crew\": 3, \"cargo_kg\": 50},\n    {\"name\": \"Starliner\", \"crew\": 7, \"cargo_kg\": 600},\n    {\"name\": \"Orion\", \"crew\": 4, \"cargo_kg\": 100}\n]\n\n# Sort by crew capacity\nsorted_by_crew = sorted(spacecraft_data, key=lambda x: x[\"crew\"])\n\n# Filter heavy cargo capacity\nheavy_cargo = list(filter(lambda x: x[\"cargo_kg\"] > 500, spacecraft_data))\n\nprint(\"Sorted by crew capacity:\")\nfor craft in sorted_by_crew:\n    print(f\"  {craft['name']}: {craft['crew']} crew\")",
      "title": "Lambda Functions and Functional Programming",
      "description": "Using lambda with built-in functions",
      "tags": ["lambda", "functional", "filter", "sorted"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "# String methods and formatting\nmission_callsign = \"  houston, we have a problem  \"\ncoordinates = \"25.8448Â° N, 80.6203Â° W\"  # Kennedy Space Center\n\n# String cleaning and formatting\ncleaned_callsign = mission_callsign.strip().title()\nparts = coordinates.replace(\"Â°\", \"\").split(\", \")\nlatitude = float(parts[0].split()[0])\nlongitude = float(parts[1].split()[0])\n\nprint(f\"Emergency: {cleaned_callsign}\")\nprint(f\"Location: {latitude:.2f}Â°N, {abs(longitude):.2f}Â°W\")\n\n# Check if coordinates are in Florida (rough bounds)\nif 24 <= latitude <= 31 and 79 <= abs(longitude) <= 87:\n    print(\"Launch site confirmed: Florida\")",
      "title": "String Methods and Processing",
      "description": "String manipulation and coordinate parsing",
      "tags": ["strings", "methods", "parsing"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "from datetime import datetime, timedelta\n\n# Mission timeline calculations\nlaunch_time = datetime(2024, 4, 15, 14, 30)  # April 15, 2024, 2:30 PM\nmission_duration = timedelta(days=180)  # 6 months\n\n# Calculate mission milestones\ndocking_time = launch_time + timedelta(hours=6, minutes=30)\nmidpoint = launch_time + mission_duration / 2\nreturn_time = launch_time + mission_duration\n\nprint(f\"Launch: {launch_time.strftime('%B %d, %Y at %I:%M %p')}\")\nprint(f\"Docking: {docking_time.strftime('%I:%M %p same day')}\")\nprint(f\"Mission midpoint: {midpoint.strftime('%B %d, %Y')}\")\nprint(f\"Return: {return_time.strftime('%B %d, %Y')}\")",
      "title": "Working with Dates and Times",
      "description": "DateTime operations for mission planning",
      "tags": ["datetime", "timedelta", "formatting"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "# File I/O simulation with context manager\nflight_data = [\n    \"Altitude: 408 km\",\n    \"Velocity: 7.66 km/s\",\n    \"Orbital period: 92.8 minutes\",\n    \"Crew status: All systems nominal\",\n    \"Next maneuver: Station keeping burn in 2 hours\"\n]\n\n# Simulate writing to file\nprint(\"Writing flight telemetry:\")\nfor i, data_point in enumerate(flight_data, 1):\n    print(f\"Record {i}: {data_point}\")\n\n# Simulate reading and processing\nprint(\"\\nProcessing telemetry data:\")\nfor line in flight_data:\n    if \"km\" in line:\n        print(f\"  Distance measurement: {line}\")",
      "title": "File I/O Concepts",
      "description": "File operations and data processing concepts",
      "tags": ["file-io", "context-manager", "data-processing"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "class MissionControl:\n    def __init__(self):\n        self.active_missions = {}\n        self.mission_count = 0\n    \n    def start_mission(self, name, crew, duration_days):\n        self.mission_count += 1\n        mission_id = f\"M{self.mission_count:03d}\"\n        self.active_missions[mission_id] = {\n            \"name\": name,\n            \"crew\": crew,\n            \"duration\": duration_days,\n            \"status\": \"Active\"\n        }\n        return mission_id\n    \n    def get_mission_summary(self):\n        total_crew = sum(m[\"crew\"] for m in self.active_missions.values())\n        return f\"{len(self.active_missions)} active missions, {total_crew} crew\"",
      "title": "Advanced Class Design",
      "description": "Complex class with multiple methods and state",
      "tags": ["classes", "methods", "state-management"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "# Multiple assignment and unpacking\nastronaut_data = (\"Samantha Cristoforetti\", \"Italy\", 200, \"ESA\")\nname, country, space_days, agency = astronaut_data\n\n# Function returning multiple values\ndef analyze_orbit(altitude_km):\n    period_minutes = 90 + (altitude_km - 400) * 0.1  # simplified\n    velocity_kmh = 27600 - (altitude_km - 400) * 2  # simplified\n    orbits_per_day = 1440 / period_minutes\n    return period_minutes, velocity_kmh, orbits_per_day\n\n# Unpack returned values\nperiod, velocity, daily_orbits = analyze_orbit(408)\n\nprint(f\"Astronaut: {name} from {country} ({agency})\")\nprint(f\"ISS Orbit: {period:.1f} min period, {daily_orbits:.1f} orbits/day\")",
      "title": "Tuple Unpacking and Multiple Assignment",
      "description": "Advanced assignment techniques with tuples",
      "tags": ["tuples", "unpacking", "multiple-assignment"],
      "difficulty": "beginner",
      "language": "python"
    },
    {
      "code": "# Putting it all together: Mission planning system\nclass SpaceMission:\n    def __init__(self, name, launch_date, duration_days):\n        self.name = name\n        self.launch_date = launch_date\n        self.duration_days = duration_days\n        self.crew = []\n        self.objectives = []\n    \n    def add_crew_member(self, astronaut_name, role):\n        self.crew.append({\"name\": astronaut_name, \"role\": role})\n    \n    def add_objective(self, objective):\n        self.objectives.append(objective)\n    \n    def mission_summary(self):\n        crew_list = \", \".join([f\"{c['name']} ({c['role']})\" for c in self.crew])\n        return f\"{self.name}: {len(self.crew)} crew, {len(self.objectives)} objectives\"\n\n# Example usage\nartemis = SpaceMission(\"Artemis III\", \"2026-09-01\", 30)\nartemis.add_crew_member(\"Commander Smith\", \"CDR\")\nartemis.add_objective(\"Lunar surface EVA\")\nprint(artemis.mission_summary())",
      "title": "Comprehensive Class Example",
      "description": "Complex class bringing together multiple Python concepts",
      "tags": ["classes", "methods", "lists", "dictionaries", "strings"],
      "difficulty": "beginner",
      "language": "python"
    }
  ]
}
